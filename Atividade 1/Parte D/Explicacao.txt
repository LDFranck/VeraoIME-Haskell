O que é isomorfismo? Duas estruturas matemáticas são ditas isomorfas se há um mapeamento
bijetivo entre elas. Ou seja, existe uma relação de correspondência de modo que cada elemento
de um corresponde a um, e somente um, elemento do outro, preservando as operações de ambos.

Pergunta: Mostrar, em Haskell, que '3*a' e 'a+a+a' são isomorfos. 
Lembrar: a composição da ida com a volta e a da volta com a ida gera a funcao identidade.

---
3*a \equiv (3,a) , ou seja, um tipo de tamanho 3 vezes o tipo a

Sabendo que Maybe x \equiv x+1 e que Bool \equiv 2 , pode-se chegar ao tipo de tamanho 3 com
Maybe Bool \equiv Just False | Just True | Nothing (3 opcoes)

Assim 3*a \equiv (Maybe Bool, a) \equiv Maybe Bool a \equiv Just False a | Just True a | Nothing a
E sabendo que Just False \equiv 1, Just True \equiv 1 e Nothing \equiv 1, tem-se que
Just False a | Just True a | Nothing a \equiv 1*a + 1*a + 1*a \equiv 3*a

Agora para a + a + a usa-se o Either a b \equiv a + b 
Assim, a + a + a \equiv Either (Either a a) a  \equiv Left (Left a) | Left (Right a) | Right a
Como anteriormente, as palavras reservadas Left \equiv 1 e Right \equiv 1 e | representa +
Logo, 1*(1*a) | 1*(1*a) | 1*a \equiv a | a | a \equiv a + a + a \equiv 3*a

Dessa forma obtem-se os tipos de ida e volta e as seguintes funções podem ser verificadas:
---

ida :: (Maybe Bool, a) -> Either (Either a a) a
ida (Just False, a) = Left (Left a)
ida (Just True, a) = Left (Right a)
ida (Nothing, a) = Right a

volta :: Either (Either a a) a -> (Maybe Bool, a)
volta (Left (Left a)) = (Just False, a)
volta (Left (Right a)) = (Just True, a)
volta (Right a) = (Nothing, a)

---
Abrindo composições:

volta $ ida (Just False, x) \equiv volta (Left (Left x)) \equiv (Just False, x)
Assim, volta $ ida (Just False, x) \equiv id (Just False, x)

volta $ ida (Just True, x) \equiv volta (Left (Right x)) \equiv (Just True, x)
Assim, volta $ ida (Just True, x) \equiv id (Just True, x)

volta $ ida (Nothing, x) \equiv volta (Right x) \equiv (Nothing, x)
Assim, volta $ ida (Nothing, x) \equiv id (Nothing, x)

ida $ volta (Left (Left x)) \equiv ida (Just False, x) \equiv Left (Left x)
Assim, ida $ volta (Left (Left x)) \equiv id (Left (Left x))

ida $ volta (Left (Right x)) \equiv ida (Just True, x) \equiv Left (Right x)
Assim, ida $ volta (Left (Right x)) \equiv id (Left (Right x))

ida $ volta (Right x) \equiv ida (Nothing, x) \equiv Right x
Assim, ida $ volta (Right x) \equiv id (Right x)
---
